{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/wangyazhi/Documents/\\u4F5C\\u54C1\\u96C6/Platycerium-store/online-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nvar isDateObject = function isDateObject(data) {\n  return data instanceof Date;\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n};\n\nvar getControllerValue = function getControllerValue(event) {\n  return isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n};\n\nvar getNodeParentName = function getNodeParentName(name) {\n  return name.substring(0, name.search(/.\\d/)) || name;\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return getNodeParentName(name) === current;\n  });\n};\n\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get(obj, path, defaultValue) {\n  if (isObject(obj) && path) {\n    var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n      return isNullOrUndefined(result) ? result : result[key];\n    }, obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = function omit(source, key) {\n  var copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nvar HookFormContext = React.createContext(null);\n\nvar useFormContext = function useFormContext() {\n  return React.useContext(HookFormContext);\n};\n\nvar FormProvider = function FormProvider(props) {\n  return React.createElement(HookFormContext.Provider, {\n    value: omit(props, 'children')\n  }, props.children);\n};\n\nvar getProxyFormState = function getProxyFormState(formState, _proxyFormState, localProxyFormState) {\n  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return function () {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  var result = {};\n\n  for (var key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar shouldRenderFormState = function shouldRenderFormState(formStateData, _proxyFormState, isRoot) {\n  var formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(function (key) {\n    return _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all);\n  });\n};\n\nvar convertToArrayPayload = function convertToArrayPayload(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nfunction useSubscribe(_ref) {\n  var disabled = _ref.disabled,\n      subject = _ref.subject,\n      callback = _ref.callback;\n\n  var _subscription = React.useRef(subject);\n\n  var _unSubscribe = React.useRef();\n\n  if (disabled) {\n    if (_subscription.current) {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n      _subscription.current = _unSubscribe.current = undefined;\n    }\n  } else {\n    if (!_subscription.current) {\n      _subscription.current = subject;\n    }\n\n    if (!_unSubscribe.current && _subscription.current) {\n      _unSubscribe.current = _subscription.current.subscribe({\n        next: callback\n      });\n    }\n  }\n\n  React.useEffect(function () {\n    return function () {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n    };\n  }, []);\n}\n\nfunction useFormState(props) {\n  var methods = useFormContext();\n\n  var _ref2 = props || {},\n      _ref2$control = _ref2.control,\n      control = _ref2$control === void 0 ? methods.control : _ref2$control,\n      disabled = _ref2.disabled,\n      name = _ref2.name;\n\n  var _React$useState = React.useState(control._formState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formState = _React$useState2[0],\n      updateFormState = _React$useState2[1];\n\n  var _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    callback: function callback(formState) {\n      return (!_name.current || !formState.name || convertToArrayPayload(_name.current).includes(formState.name)) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState));\n    },\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nfunction useController(props) {\n  var methods = useFormContext();\n  var name = props.name,\n      _props$control = props.control,\n      control = _props$control === void 0 ? methods.control : _props$control,\n      shouldUnregister = props.shouldUnregister;\n\n  var _React$useState3 = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue))),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setInputStateValue = _React$useState4[1];\n\n  var formState = useFormState({\n    control: control || methods.control,\n    name: name\n  });\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: function callback(data) {\n      return (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, name));\n    }\n  });\n  var registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value: value\n  }));\n  var updateMounted = React.useCallback(function (name, value) {\n    var field = get(control._fields, name);\n\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(function () {\n    updateMounted(name, true);\n    return function () {\n      var _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: function onChange(event) {\n        var value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: function onBlur() {\n        registerProps.onBlur({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name: name,\n      value: value,\n      ref: function ref(elm) {\n        var field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: function focus() {\n              return elm.focus();\n            },\n            setCustomValidity: function setCustomValidity(message) {\n              return elm.setCustomValidity(message);\n            },\n            reportValidity: function reportValidity() {\n              return elm.reportValidity();\n            }\n          };\n        }\n      }\n    },\n    formState: formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nvar Controller = function Controller(props) {\n  return props.render(useController(props));\n};\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), _defineProperty({}, type, message || true))\n  }) : {};\n};\n\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\n\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar focusFieldBy = function focusFieldBy(fields, callback, fieldsNames) {\n  var _iterator = _createForOfIteratorHelper(fieldsNames || Object.keys(fields)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var field = get(fields, key);\n\n      if (field) {\n        var _f = field._f;\n        var current = omit(field, '_f');\n\n        if (_f && callback(_f.name)) {\n          if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n            break;\n          } else if (_f.refs) {\n            _f.refs[0].focus();\n\n            break;\n          }\n        } else if (isObject(current)) {\n          focusFieldBy(current, callback);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar getFocusFieldName = function getFocusFieldName(name, index) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || \"\".concat(name, \".\").concat(isUndefined(options.focusIndex) ? index : options.focusIndex, \".\") : '';\n};\n\nvar mapCurrentIds = function mapCurrentIds(values, _fieldIds, keyName) {\n  return values.map(function (value, index) {\n    var output = _fieldIds.current[index];\n    return Object.assign(Object.assign({}, value), output ? _defineProperty({}, keyName, output[keyName]) : {});\n  });\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(function (value) {\n    return Object.assign(Object.assign({}, value[keyName] ? {} : _defineProperty({}, keyName, generateId())), value);\n  });\n};\n\nfunction append(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(data)), _toConsumableArray(convertToArrayPayload(value)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? value.map(function () {\n    return undefined;\n  }) : undefined;\n};\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data.slice(index)));\n}\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar omitKeys = function omitKeys(fields, keyName) {\n  return fields.map(function () {\n    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return omit(field, keyName);\n  });\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(convertToArrayPayload(data)));\n}\n\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n\n  var temp = _toConsumableArray(data);\n\n  var _iterator2 = _createForOfIteratorHelper(indexes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort(function (a, b) {\n    return a - b;\n  }));\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = function updateAt(fieldValues, index, value) {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nvar useFieldArray = function useFieldArray(props) {\n  var methods = useFormContext();\n  var _props$control2 = props.control,\n      control = _props$control2 === void 0 ? methods.control : _props$control2,\n      name = props.name,\n      _props$keyName = props.keyName,\n      keyName = _props$keyName === void 0 ? 'id' : _props$keyName,\n      shouldUnregister = props.shouldUnregister;\n\n  var _React$useState5 = React.useState(mapIds(control._getFieldArray(name), keyName)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      fields = _React$useState6[0],\n      setFields = _React$useState6[1];\n\n  var _fieldIds = React.useRef(fields);\n\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: function callback(_ref5) {\n      var values = _ref5.values,\n          fieldArrayName = _ref5.name;\n\n      if (fieldArrayName === name || !fieldArrayName) {\n        setFields(mapIds(get(values, name), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  var updateValues = React.useCallback(function (updatedFieldArrayValuesWithKey) {\n    var updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n\n  var append$1 = function append$1(value, options) {\n    var appendValue = convertToArrayPayload(value);\n    var updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n\n  var prepend$1 = function prepend$1(value, options) {\n    var updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  var remove = function remove(index) {\n    var updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n\n  var insert$1 = function insert$1(index, value, options) {\n    var updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  var swap = function swap(indexA, indexB) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  var move = function move(from, to) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  var update = function update(index, value) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    var updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n\n  var replace = function replace(value) {\n    var updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n\n    control._updateFieldArray(name, function () {\n      return updatedFieldArrayValuesWithKey;\n    }, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n\n  React.useEffect(function () {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      var _iterator3 = _createForOfIteratorHelper(control._names.watch),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watchField = _step3.value;\n\n          if (name.startsWith(watchField)) {\n            control._subjects.state.next({});\n\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    control._subjects.watch.next({\n      name: name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, function (key) {\n      return key.startsWith(control._names.focus);\n    });\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(function () {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return function () {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\n\nfunction cloneObject(data) {\n  var copy;\n  var isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (var key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  var keys1 = Object.keys(object1);\n  var keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      var val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = function getValidationModes(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"select-multiple\";\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = function live(ref) {\n  return !isHTMLElement(ref) || !document.contains(ref);\n};\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription() {\n    _classCallCheck(this, Subscription);\n\n    this.tearDowns = [];\n  }\n\n  _createClass(Subscription, [{\n    key: \"add\",\n    value: function add(tearDown) {\n      this.tearDowns.push(tearDown);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _iterator4 = _createForOfIteratorHelper(this.tearDowns),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var teardown = _step4.value;\n          teardown();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.tearDowns = [];\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar Subscriber = /*#__PURE__*/function () {\n  function Subscriber(observer, subscription) {\n    var _this = this;\n\n    _classCallCheck(this, Subscriber);\n\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(function () {\n      return _this.closed = true;\n    });\n  }\n\n  _createClass(Subscriber, [{\n    key: \"next\",\n    value: function next(value) {\n      if (!this.closed) {\n        this.observer.next(value);\n      }\n    }\n  }]);\n\n  return Subscriber;\n}();\n\nvar Subject = /*#__PURE__*/function () {\n  function Subject() {\n    _classCallCheck(this, Subject);\n\n    this.observers = [];\n  }\n\n  _createClass(Subject, [{\n    key: \"next\",\n    value: function next(value) {\n      var _iterator5 = _createForOfIteratorHelper(this.observers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var observer = _step5.value;\n          observer.next(value);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      var subscription = new Subscription();\n      var subscriber = new Subscriber(observer, subscription);\n      this.observers.push(subscriber);\n      return subscription;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.observers = [];\n    }\n  }]);\n\n  return Subject;\n}();\n\nfunction baseGet(object, updatePath) {\n  var length = updatePath.slice(0, -1).length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = void 0;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.checked && !option.disabled;\n      }).map(function (option) {\n        return option.value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = function getFieldValueAs(value, _ref6) {\n  var valueAsNumber = _ref6.valueAsNumber,\n      valueAsDate = _ref6.valueAsDate,\n      setValueAs = _ref6.setValueAs;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.checked && !option.disabled ? {\n      isValid: true,\n      value: option.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nfunction getFieldValue(_f) {\n  var ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(function (ref) {\n    return ref.disabled;\n  }) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return _toConsumableArray(ref.selectedOptions).map(function (_ref7) {\n      var value = _ref7.value;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = function getResolverOptions(fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) {\n  var fields = {};\n\n  var _iterator6 = _createForOfIteratorHelper(fieldsNames),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var name = _step6.value;\n      var field = get(_fields, name);\n      field && set(fields, name, field._f);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return {\n    criteriaMode: criteriaMode,\n    names: _toConsumableArray(fieldsNames),\n    fields: fields,\n    shouldUseNativeValidation: shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = function hasValidation(options) {\n  return options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n};\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), _defineProperty({}, key, true));\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n};\n\nvar skipValidation = function skipValidation(isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = function unsetEmptyArray(ref, name) {\n  return !compact(get(ref, name, [])).length && unset(ref, name);\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || React.isValidElement(value);\n};\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) {\n    var _field$_f, ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, inputRef, setCustomValidty, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref9, value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, result, validateError, validationResult, key, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _field$_f = field._f, ref = _field$_f.ref, refs = _field$_f.refs, required = _field$_f.required, maxLength = _field$_f.maxLength, minLength = _field$_f.minLength, min = _field$_f.min, max = _field$_f.max, pattern = _field$_f.pattern, validate = _field$_f.validate, name = _field$_f.name, valueAsNumber = _field$_f.valueAsNumber, mount = _field$_f.mount, disabled = _field$_f.disabled;\n\n            if (!(!mount || disabled)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 3:\n            inputRef = refs ? refs[0] : ref;\n\n            setCustomValidty = function setCustomValidty(message) {\n              if (shouldUseNativeValidation && inputRef.reportValidity) {\n                inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n                inputRef.reportValidity();\n              }\n            };\n\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n            };\n\n            if (!(required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid))) {\n              _context.next = 19;\n              break;\n            }\n\n            _ref9 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), value = _ref9.value, message = _ref9.message;\n\n            if (!value) {\n              _context.next = 19;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: inputRef\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 19;\n              break;\n            }\n\n            setCustomValidty(message);\n            return _context.abrupt(\"return\", error);\n\n          case 19:\n            if (!(!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max)))) {\n              _context.next = 28;\n              break;\n            }\n\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n\n            if (!isNaN(inputValue)) {\n              valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(inputValue);\n\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 28;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 28;\n              break;\n            }\n\n            setCustomValidty(error[name].message);\n            return _context.abrupt(\"return\", error);\n\n          case 28:\n            if (!((maxLength || minLength) && !isEmpty && isString(inputValue))) {\n              _context.next = 38;\n              break;\n            }\n\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 38;\n              break;\n            }\n\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 38;\n              break;\n            }\n\n            setCustomValidty(error[name].message);\n            return _context.abrupt(\"return\", error);\n\n          case 38:\n            if (!(pattern && !isEmpty && isString(inputValue))) {\n              _context.next = 45;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n\n            if (!(isRegex(patternValue) && !inputValue.match(patternValue))) {\n              _context.next = 45;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 45;\n              break;\n            }\n\n            setCustomValidty(_message);\n            return _context.abrupt(\"return\", error);\n\n          case 45:\n            if (!validate) {\n              _context.next = 79;\n              break;\n            }\n\n            if (!isFunction(validate)) {\n              _context.next = 58;\n              break;\n            }\n\n            _context.next = 49;\n            return validate(inputValue);\n\n          case 49:\n            result = _context.sent;\n            validateError = getValidateError(result, inputRef);\n\n            if (!validateError) {\n              _context.next = 56;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 56;\n              break;\n            }\n\n            setCustomValidty(validateError.message);\n            return _context.abrupt(\"return\", error);\n\n          case 56:\n            _context.next = 79;\n            break;\n\n          case 58:\n            if (!isObject(validate)) {\n              _context.next = 79;\n              break;\n            }\n\n            validationResult = {};\n            _context.t0 = _regeneratorRuntime.keys(validate);\n\n          case 61:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 75;\n              break;\n            }\n\n            key = _context.t1.value;\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 65;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 75);\n\n          case 65:\n            _context.t2 = getValidateError;\n            _context.next = 68;\n            return validate[key](inputValue);\n\n          case 68:\n            _context.t3 = _context.sent;\n            _context.t4 = inputRef;\n            _context.t5 = key;\n            _validateError = (0, _context.t2)(_context.t3, _context.t4, _context.t5);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n              setCustomValidty(_validateError.message);\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n            _context.next = 61;\n            break;\n\n          case 75:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 79;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: inputRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 79;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 79:\n            setCustomValidty(true);\n            return _context.abrupt(\"return\", error);\n\n          case 81:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nvar isWindowUndefined = typeof window === 'undefined';\n\nfunction createFormControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  var _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  var _fields = {};\n\n  var _defaultValues = _options.defaultValues || {};\n\n  var _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  var _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  var _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  var delayErrorCallback;\n  var timer = 0;\n  var validateFields = {};\n  var _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  var _subjects = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  };\n  var validationModeBeforeSubmit = getValidationModes(_options.mode);\n  var validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  var shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  var debounce = function debounce(callback, wait) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      clearTimeout(timer);\n      timer = window.setTimeout(function () {\n        return callback.apply(void 0, args);\n      }, wait);\n    };\n  };\n\n  var isFieldWatched = function isFieldWatched(name, isBlurEvent) {\n    return !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  };\n\n  var _updateValid = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(shouldSkipRender) {\n      var isValid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              isValid = false;\n\n              if (!_proxyFormState.isValid) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (!_options.resolver) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.t1 = isEmptyObject;\n              _context2.next = 6;\n              return executeResolver();\n\n            case 6:\n              _context2.t2 = _context2.sent.errors;\n              _context2.t0 = (0, _context2.t1)(_context2.t2);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.next = 12;\n              return executeBuildInValidation(_fields, true);\n\n            case 12:\n              _context2.t0 = _context2.sent;\n\n            case 13:\n              isValid = _context2.t0;\n\n              if (!shouldSkipRender && isValid !== _formState.isValid) {\n                _formState.isValid = isValid;\n\n                _subjects.state.next({\n                  isValid: isValid\n                });\n              }\n\n            case 15:\n              return _context2.abrupt(\"return\", isValid);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function _updateValid(_x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var _updateFieldArray = function _updateFieldArray(name, method, args) {\n    var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      var fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      var errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      var touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  var updateErrors = function updateErrors(name, error) {\n    return set(_formState.errors, name, error), _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  var updateValidAndValue = function updateValidAndValue(name, shouldSkipSetValueAs, ref) {\n    var field = get(_fields, name);\n\n    if (field) {\n      var defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  var updateTouchAndDirty = function updateTouchAndDirty(name, fieldValue, isCurrentTouched) {\n    var shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var isFieldDirty = false;\n    var output = {\n      name: name\n    };\n    var isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      var isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      var isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      var isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  var updateFieldArrayDirty = function updateFieldArrayDirty(name, value) {\n    return set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name);\n  };\n\n  var shouldRenderByError = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(shouldSkipRender, name, isValid, error, fieldState) {\n      var previousFieldError, shouldUpdateValid, updatedFormState;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              previousFieldError = get(_formState.errors, name);\n              shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n              if (props.delayError && error) {\n                delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n                delayErrorCallback(name, error);\n              } else {\n                clearTimeout(timer);\n                error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n              }\n\n              if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n                updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n                  isValid: isValid\n                } : {}), {\n                  errors: _formState.errors,\n                  name: name\n                });\n                _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n                _subjects.state.next(updatedFormState);\n              }\n\n              validateFields[name]--;\n\n              if (_proxyFormState.isValidating && !validateFields[name]) {\n                _subjects.state.next({\n                  isValidating: false\n                });\n\n                validateFields = {};\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function shouldRenderByError(_x6, _x7, _x8, _x9, _x10) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var executeResolver = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!_options.resolver) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 3;\n              return _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n\n            case 3:\n              _context4.t0 = _context4.sent;\n              _context4.next = 7;\n              break;\n\n            case 6:\n              _context4.t0 = {};\n\n            case 7:\n              return _context4.abrupt(\"return\", _context4.t0);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function executeResolver(_x11) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var executeResolverValidation = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(names) {\n      var _yield$executeResolve, errors, _iterator7, _step7, _name2, _error;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return executeResolver();\n\n            case 2:\n              _yield$executeResolve = _context5.sent;\n              errors = _yield$executeResolve.errors;\n\n              if (names) {\n                _iterator7 = _createForOfIteratorHelper(names);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    _name2 = _step7.value;\n                    _error = get(errors, _name2);\n                    _error ? set(_formState.errors, _name2, _error) : unset(_formState.errors, _name2);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              } else {\n                _formState.errors = errors;\n              }\n\n              return _context5.abrupt(\"return\", errors);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function executeResolverValidation(_x12) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var executeBuildInValidation = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fields, shouldOnlyCheckValid) {\n      var context,\n          _name3,\n          field,\n          fieldReference,\n          fieldValue,\n          fieldError,\n          _args6 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              context = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {\n                valid: true\n              };\n              _context6.t0 = _regeneratorRuntime.keys(fields);\n\n            case 2:\n              if ((_context6.t1 = _context6.t0()).done) {\n                _context6.next = 23;\n                break;\n              }\n\n              _name3 = _context6.t1.value;\n              field = fields[_name3];\n\n              if (!field) {\n                _context6.next = 21;\n                break;\n              }\n\n              fieldReference = field._f;\n              fieldValue = omit(field, '_f');\n\n              if (!fieldReference) {\n                _context6.next = 17;\n                break;\n              }\n\n              _context6.next = 11;\n              return validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n            case 11:\n              fieldError = _context6.sent;\n\n              if (!fieldError[fieldReference.name]) {\n                _context6.next = 16;\n                break;\n              }\n\n              context.valid = false;\n\n              if (!shouldOnlyCheckValid) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"break\", 23);\n\n            case 16:\n              if (!shouldOnlyCheckValid) {\n                fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n              }\n\n            case 17:\n              _context6.t2 = fieldValue;\n\n              if (!_context6.t2) {\n                _context6.next = 21;\n                break;\n              }\n\n              _context6.next = 21;\n              return executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context);\n\n            case 21:\n              _context6.next = 2;\n              break;\n\n            case 23:\n              return _context6.abrupt(\"return\", context.valid);\n\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function executeBuildInValidation(_x13, _x14) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var _removeUnmounted = function _removeUnmounted() {\n    var _iterator8 = _createForOfIteratorHelper(_names.unMount),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _name4 = _step8.value;\n        var field = get(_fields, _name4);\n        field && (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) && unregister(_name4);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    _names.unMount = new Set();\n  };\n\n  var _getDirty = function _getDirty(name, data) {\n    return name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues);\n  };\n\n  var _getWatch = function _getWatch(names, defaultValue, isGlobal) {\n    var fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? _defineProperty({}, names, defaultValue) : defaultValue);\n\n    if (names) {\n      var result = convertToArrayPayload(names).map(function (fieldName) {\n        return isGlobal && _names.watch.add(fieldName), get(fieldValues, fieldName);\n      });\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  var _getFieldArray = function _getFieldArray(name) {\n    return get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n  };\n\n  var setFieldValue = function setFieldValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    var field = get(_fields, name);\n    var fieldValue = value;\n\n    if (field) {\n      var fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          _toConsumableArray(fieldReference.ref.options).forEach(function (selectRef) {\n            return selectRef.selected = fieldValue.includes(selectRef.value);\n          });\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(function (checkboxRef) {\n              return checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(function (data) {\n                return data === checkboxRef.value;\n              }) : fieldValue === checkboxRef.value;\n            }) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(function (radioRef) {\n              return radioRef.checked = radioRef.value === fieldValue;\n            });\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender && _subjects.control.next({\n          values: _formValues,\n          name: name\n        });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  var setValues = function setValues(name, value, options) {\n    for (var fieldKey in value) {\n      var fieldValue = value[fieldKey];\n      var fieldName = \"\".concat(name, \".\").concat(fieldKey);\n      var field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  var setValue = function setValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n\n    var isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name: name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name: name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name: name\n    });\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n      var target, name, field, _error2, isValid, fieldValue, isBlurEvent, shouldSkipValidation, isWatched, fieldState, shouldRender, _yield$executeResolve2, errors, parentNodeName, parentField, parentError;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              target = event.target;\n              name = target.name;\n              field = get(_fields, name);\n\n              if (!field) {\n                _context7.next = 37;\n                break;\n              }\n\n              fieldValue = target.type ? getFieldValue(field._f) : target.value;\n              isBlurEvent = event.type === EVENTS.BLUR;\n              shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n              isWatched = isFieldWatched(name, isBlurEvent);\n\n              if (isBlurEvent && field._f.onBlur) {\n                field._f.onBlur(event);\n              } else if (field._f.onChange) {\n                field._f.onChange(event);\n              }\n\n              set(_formValues, name, fieldValue);\n              fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n              shouldRender = !isEmptyObject(fieldState) || isWatched;\n              !isBlurEvent && _subjects.watch.next({\n                name: name,\n                type: event.type\n              });\n\n              if (!shouldSkipValidation) {\n                _context7.next = 15;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", shouldRender && _subjects.state.next(Object.assign({\n                name: name\n              }, isWatched ? {} : fieldState)));\n\n            case 15:\n              !isBlurEvent && isWatched && _subjects.state.next({});\n              validateFields[name] = validateFields[name] ? +1 : 1;\n              _proxyFormState.isValidating && _subjects.state.next({\n                isValidating: true\n              });\n\n              if (!_options.resolver) {\n                _context7.next = 28;\n                break;\n              }\n\n              _context7.next = 21;\n              return executeResolver([name]);\n\n            case 21:\n              _yield$executeResolve2 = _context7.sent;\n              errors = _yield$executeResolve2.errors;\n              _error2 = get(errors, name);\n\n              if (isCheckBoxInput(target) && !_error2) {\n                parentNodeName = getNodeParentName(name);\n                parentField = get(_fields, parentNodeName);\n\n                if (Array.isArray(parentField) && parentField.every(function (field) {\n                  return field._f && isCheckBoxInput(field._f.ref);\n                })) {\n                  parentError = get(errors, parentNodeName, {});\n                  parentError.type && (_error2 = parentError);\n                  name = parentNodeName;\n                }\n              }\n\n              isValid = isEmptyObject(errors);\n              _context7.next = 35;\n              break;\n\n            case 28:\n              _context7.next = 30;\n              return validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n            case 30:\n              _context7.t0 = name;\n              _error2 = _context7.sent[_context7.t0];\n              _context7.next = 34;\n              return _updateValid(true);\n\n            case 34:\n              isValid = _context7.sent;\n\n            case 35:\n              field._f.deps && trigger(field._f.deps);\n              shouldRenderByError(false, name, isValid, _error2, fieldState);\n\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function handleChange(_x15) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var trigger = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name) {\n      var options,\n          isValid,\n          validationResult,\n          fieldNames,\n          errors,\n          _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              fieldNames = convertToArrayPayload(name);\n\n              _subjects.state.next({\n                isValidating: true\n              });\n\n              if (!_options.resolver) {\n                _context9.next = 11;\n                break;\n              }\n\n              _context9.next = 6;\n              return executeResolverValidation(isUndefined(name) ? name : fieldNames);\n\n            case 6:\n              errors = _context9.sent;\n              isValid = isEmptyObject(errors);\n              validationResult = name ? !fieldNames.some(function (name) {\n                return get(errors, name);\n              }) : isValid;\n              _context9.next = 21;\n              break;\n\n            case 11:\n              if (!name) {\n                _context9.next = 18;\n                break;\n              }\n\n              _context9.next = 14;\n              return Promise.all(fieldNames.map( /*#__PURE__*/function () {\n                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(fieldName) {\n                  var field;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          field = get(_fields, fieldName);\n                          _context8.next = 3;\n                          return executeBuildInValidation(field && field._f ? _defineProperty({}, fieldName, field) : field);\n\n                        case 3:\n                          return _context8.abrupt(\"return\", _context8.sent);\n\n                        case 4:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                return function (_x17) {\n                  return _ref18.apply(this, arguments);\n                };\n              }()));\n\n            case 14:\n              validationResult = _context9.sent.every(Boolean);\n\n              _updateValid();\n\n              _context9.next = 21;\n              break;\n\n            case 18:\n              _context9.next = 20;\n              return executeBuildInValidation(_fields);\n\n            case 20:\n              validationResult = isValid = _context9.sent;\n\n            case 21:\n              _subjects.state.next(Object.assign(Object.assign({}, !isString(name) || isValid !== _formState.isValid ? {} : {\n                name: name\n              }), {\n                errors: _formState.errors,\n                isValid: isValid,\n                isValidating: false\n              }));\n\n              options.shouldFocus && !validationResult && focusFieldBy(_fields, function (key) {\n                return get(_formState.errors, key);\n              }, name ? fieldNames : _names.mount);\n              return _context9.abrupt(\"return\", validationResult);\n\n            case 24:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function trigger(_x16) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getValues = function getValues(fieldNames) {\n    var values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(function (name) {\n      return get(values, name);\n    });\n  };\n\n  var clearErrors = function clearErrors(name) {\n    name ? convertToArrayPayload(name).forEach(function (inputName) {\n      return unset(_formState.errors, inputName);\n    }) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  var setError = function setError(name, error, options) {\n    var ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n\n    _subjects.state.next({\n      name: name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  var watch = function watch(name, defaultValue) {\n    return isFunction(name) ? _subjects.watch.subscribe({\n      next: function next(info) {\n        return name(_getWatch(undefined, defaultValue), info);\n      }\n    }) : _getWatch(name, defaultValue, true);\n  };\n\n  var unregister = function unregister(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _iterator9 = _createForOfIteratorHelper(name ? convertToArrayPayload(name) : _names.mount),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var fieldName = _step9.value;\n\n        _names.mount.delete(fieldName);\n\n        _names.array.delete(fieldName);\n\n        if (get(_fields, fieldName)) {\n          if (!options.keepValue) {\n            unset(_fields, fieldName);\n            unset(_formValues, fieldName);\n          }\n\n          !options.keepError && unset(_formState.errors, fieldName);\n          !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n          !options.keepTouched && unset(_formState.touchedFields, fieldName);\n          !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  var register = function register(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name: name\n        }\n      }), {\n        name: name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name: name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: function (_ref20) {\n        function ref(_x18) {\n          return _ref20.apply(this, arguments);\n        }\n\n        ref.toString = function () {\n          return _ref20.toString();\n        };\n\n        return ref;\n      }(function (ref) {\n        if (ref) {\n          register(name, options);\n\n          var _field = get(_fields, name);\n\n          var fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          var isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n          if (fieldRef === _field._f.ref || isRadioOrCheckbox && compact(_field._f.refs || []).find(function (option) {\n            return option === fieldRef;\n          })) {\n            return;\n          }\n\n          _field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, _field._f), {\n              refs: [].concat(_toConsumableArray(compact(_field._f.refs || []).filter(function (ref) {\n                return isHTMLElement(ref) && document.contains(ref);\n              })), [fieldRef]),\n              ref: {\n                type: fieldRef.type,\n                name: name\n              }\n            }) : Object.assign(Object.assign({}, _field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, _field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          var _field2 = get(_fields, name, {});\n\n          var shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n\n          if (_field2._f) {\n            _field2._f.mount = false;\n          }\n\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      })\n    });\n  };\n\n  var handleSubmit = function handleSubmit(onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(e) {\n        var hasNoPromiseError, fieldValues, _yield$executeResolve3, errors, values;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault && e.preventDefault();\n                  e.persist && e.persist();\n                }\n\n                hasNoPromiseError = true;\n                fieldValues = Object.assign({}, _formValues);\n\n                _subjects.state.next({\n                  isSubmitting: true\n                });\n\n                _context10.prev = 4;\n\n                if (!_options.resolver) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                _context10.next = 8;\n                return executeResolver();\n\n              case 8:\n                _yield$executeResolve3 = _context10.sent;\n                errors = _yield$executeResolve3.errors;\n                values = _yield$executeResolve3.values;\n                _formState.errors = errors;\n                fieldValues = values;\n                _context10.next = 17;\n                break;\n\n              case 15:\n                _context10.next = 17;\n                return executeBuildInValidation(_fields);\n\n              case 17:\n                if (!(isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(function (name) {\n                  return get(fieldValues, name);\n                }))) {\n                  _context10.next = 23;\n                  break;\n                }\n\n                _subjects.state.next({\n                  errors: {},\n                  isSubmitting: true\n                });\n\n                _context10.next = 21;\n                return onValid(fieldValues, e);\n\n              case 21:\n                _context10.next = 28;\n                break;\n\n              case 23:\n                _context10.t0 = onInvalid;\n\n                if (!_context10.t0) {\n                  _context10.next = 27;\n                  break;\n                }\n\n                _context10.next = 27;\n                return onInvalid(_formState.errors, e);\n\n              case 27:\n                _options.shouldFocusError && focusFieldBy(_fields, function (key) {\n                  return get(_formState.errors, key);\n                }, _names.mount);\n\n              case 28:\n                _context10.next = 34;\n                break;\n\n              case 30:\n                _context10.prev = 30;\n                _context10.t1 = _context10[\"catch\"](4);\n                hasNoPromiseError = false;\n                throw _context10.t1;\n\n              case 34:\n                _context10.prev = 34;\n                _formState.isSubmitted = true;\n\n                _subjects.state.next({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n                  submitCount: _formState.submitCount + 1,\n                  errors: _formState.errors\n                });\n\n                return _context10.finish(34);\n\n              case 38:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[4, 30, 34, 38]]);\n      }));\n\n      return function (_x19) {\n        return _ref21.apply(this, arguments);\n      };\n    }();\n  };\n\n  var reset = function reset(formValues) {\n    var keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var updatedValues = formValues || _defaultValues;\n    var cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : cloneUpdatedValues;\n\n      if (isWeb) {\n        var _iterator10 = _createForOfIteratorHelper(_names.mount),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _name5 = _step10.value;\n            var field = get(_fields, _name5);\n\n            if (field && field._f) {\n              var fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n              try {\n                isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n                break;\n              } catch (_a) {}\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = Object.assign({}, updatedValues);\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues ? _defaultValues : Object.assign({}, updatedValues)\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  var setFocus = function setFocus(name) {\n    return get(_fields, name)._f.ref.focus();\n  };\n\n  return {\n    control: {\n      register: register,\n      unregister: unregister,\n      _getWatch: _getWatch,\n      _getDirty: _getDirty,\n      _updateValid: _updateValid,\n      _removeUnmounted: _removeUnmounted,\n      _updateFieldArray: _updateFieldArray,\n      _getFieldArray: _getFieldArray,\n      _subjects: _subjects,\n      _proxyFormState: _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger: trigger,\n    register: register,\n    handleSubmit: handleSubmit,\n    watch: watch,\n    setValue: setValue,\n    getValues: getValues,\n    reset: reset,\n    clearErrors: clearErrors,\n    unregister: unregister,\n    setError: setError,\n    setFocus: setFocus\n  };\n}\n\nfunction useForm() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _formControl = React.useRef();\n\n  var _React$useState7 = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      formState = _React$useState8[0],\n      updateFormState = _React$useState8[1];\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState: formState\n    });\n  }\n\n  var control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: function callback(formState) {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(function () {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nfunction useWatch(props) {\n  var methods = useFormContext();\n\n  var _ref22 = props || {},\n      _ref22$control = _ref22.control,\n      control = _ref22$control === void 0 ? methods.control : _ref22$control,\n      name = _ref22.name,\n      defaultValue = _ref22.defaultValue,\n      disabled = _ref22.disabled;\n\n  var _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    subject: control._subjects.watch,\n    callback: function callback(_ref23) {\n      var name = _ref23.name;\n\n      if (!_name.current || !name || convertToArrayPayload(_name.current).some(function (currentName) {\n        return name && currentName && (name.startsWith(currentName) || currentName.startsWith(name));\n      })) {\n        control._stateFlags.mount = true;\n\n        var fieldValues = control._getWatch(_name.current, defaultValue);\n\n        updateValue(isObject(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? _toConsumableArray(fieldValues) : fieldValues);\n      }\n    }\n  });\n\n  var _React$useState9 = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      value = _React$useState10[0],\n      updateValue = _React$useState10[1];\n\n  React.useEffect(function () {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"names":["append","appendAt","prepend","prependAt","insert","insertAt","isCheckBox"],"mappings":"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","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/Subject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject?: SubjectType<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>({ disabled, subject, callback }: Props<T>) {\n  const _subscription = React.useRef(subject);\n  const _unSubscribe = React.useRef<{ unsubscribe: TearDown }>();\n\n  if (disabled) {\n    if (_subscription.current) {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n      _subscription.current = _unSubscribe.current = undefined;\n    }\n  } else {\n    if (!_subscription.current) {\n      _subscription.current = subject;\n    }\n\n    if (!_unSubscribe.current && _subscription.current) {\n      _unSubscribe.current = _subscription.current.subscribe({\n        next: callback,\n      });\n    }\n  }\n\n  React.useEffect(\n    () => () => {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n    },\n    [],\n  );\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  Path,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      (!_name.current ||\n        !formState.name ||\n        convertToArrayPayload(_name.current).includes(\n          formState.name as Path<TFieldValues>,\n        )) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, name)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === name || !fieldArrayName) {\n        setFields(mapIds(get(values, name), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: () => void;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent && field._f.onBlur) {\n        field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) || isValid !== _formState.isValid ? {} : { name }),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(\n                          (ref) => isHTMLElement(ref) && document.contains(ref),\n                        ),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : cloneUpdatedValues;\n\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: ({ name }) => {\n      if (\n        !_name.current ||\n        !name ||\n        convertToArrayPayload(_name.current).some(\n          (currentName) =>\n            name &&\n            currentName &&\n            (name.startsWith(currentName as InternalFieldName) ||\n              currentName.startsWith(name as InternalFieldName)),\n        )\n      ) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}