{"ast":null,"code":"import decode from \"jwt-decode\";\nconst JWT = \"store_token_id\";\n\nconst setToken = token => {\n  localStorage.setItem(JWT, token);\n};\n\nconst getToken = token => {\n  return localStorage.getItem(JWT);\n};\n\nconst isLogin = () => {\n  const jwToken = getToken();\n  return !!jwToken && !isTokenExpired(jwToken);\n};\n\nconst isTokenExpired = token => {\n  try {\n    const _info = decode(token);\n\n    if (_info.exp < Date.now() / 1000) {\n      return true;\n    } else return false;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getUser = () => {\n  const jwToken = getToken();\n\n  if (isLogin()) {\n    const user = decode(jwToken);\n    return user;\n  } else {\n    return null;\n  }\n};\n\nconst logout = () => {\n  localStorage.removeItem(JWT);\n};\n\nglobal.auth = {\n  setToken,\n  getUser,\n  logout\n};","map":{"version":3,"sources":["/Users/wangyazhi/Documents/作品集/Platycerium-store/online-store/src/commons/auth.js"],"names":["decode","JWT","setToken","token","localStorage","setItem","getToken","getItem","isLogin","jwToken","isTokenExpired","_info","exp","Date","now","error","getUser","user","logout","removeItem","global","auth"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,MAAMC,GAAG,GAAG,gBAAZ;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BC,EAAAA,YAAY,CAACC,OAAb,CAAqBJ,GAArB,EAA0BE,KAA1B;AACD,CAFD;;AAIA,MAAMG,QAAQ,GAAIH,KAAD,IAAW;AAC1B,SAAOC,YAAY,CAACG,OAAb,CAAqBN,GAArB,CAAP;AACD,CAFD;;AAIA,MAAMO,OAAO,GAAG,MAAM;AACpB,QAAMC,OAAO,GAAGH,QAAQ,EAAxB;AAEA,SAAO,CAAC,CAACG,OAAF,IAAa,CAACC,cAAc,CAACD,OAAD,CAAnC;AACD,CAJD;;AAMA,MAAMC,cAAc,GAAIP,KAAD,IAAW;AAChC,MAAI;AACF,UAAMQ,KAAK,GAAGX,MAAM,CAACG,KAAD,CAApB;;AACA,QAAIQ,KAAK,CAACC,GAAN,GAAYC,IAAI,CAACC,GAAL,KAAa,IAA7B,EAAmC;AACjC,aAAO,IAAP;AACD,KAFD,MAEO,OAAO,KAAP;AACR,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF,CATD;;AAWA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMP,OAAO,GAAGH,QAAQ,EAAxB;;AAEA,MAAIE,OAAO,EAAX,EAAe;AACb,UAAMS,IAAI,GAAGjB,MAAM,CAACS,OAAD,CAAnB;AAEA,WAAOQ,IAAP;AACD,GAJD,MAIO;AACL,WAAO,IAAP;AACD;AACF,CAVD;;AAYA,MAAMC,MAAM,GAAG,MAAM;AACnBd,EAAAA,YAAY,CAACe,UAAb,CAAwBlB,GAAxB;AACD,CAFD;;AAIAmB,MAAM,CAACC,IAAP,GAAc;AACZnB,EAAAA,QADY;AAEZc,EAAAA,OAFY;AAGZE,EAAAA;AAHY,CAAd","sourcesContent":["import decode from \"jwt-decode\";\n\nconst JWT = \"store_token_id\";\n\nconst setToken = (token) => {\n  localStorage.setItem(JWT, token);\n};\n\nconst getToken = (token) => {\n  return localStorage.getItem(JWT);\n};\n\nconst isLogin = () => {\n  const jwToken = getToken();\n\n  return !!jwToken && !isTokenExpired(jwToken);\n};\n\nconst isTokenExpired = (token) => {\n  try {\n    const _info = decode(token);\n    if (_info.exp < Date.now() / 1000) {\n      return true;\n    } else return false;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getUser = () => {\n  const jwToken = getToken();\n\n  if (isLogin()) {\n    const user = decode(jwToken);\n\n    return user;\n  } else {\n    return null;\n  }\n};\n\nconst logout = () => {\n  localStorage.removeItem(JWT);\n};\n\nglobal.auth = {\n  setToken,\n  getUser,\n  logout,\n};\n"]},"metadata":{},"sourceType":"module"}